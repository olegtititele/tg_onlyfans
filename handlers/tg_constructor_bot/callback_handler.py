import asyncio
import uuid
from datetime import datetime, timedelta

from aiogram import Dispatcher, types
from config.states import States
from create_bot import bot
from db.db import DB
from keyboards.keyboards import *
from payments.QIWI import Qiwi
from payments.YOOMONEY import YooMoney
from telegram import ParseMode

from .bot_callback_data import *
from .callback_handlers.admin_callback import admin_callback
from .callback_handlers.back_buttons_callback import back_buttons_callback
from .callback_handlers.image_callback import image_callback
from .callback_handlers.scroll_buttons_callback import scroll_buttons_callback
from .callback_handlers.userbot_settings_callback import \
    userbot_settings_callback
from .callback_handlers.video_callback import video_callback


async def callback_handler(call: types.CallbackQuery):
    db = DB()
    kb = Keyboards()
    states = States()
    chat_id = call.from_user.id
    message_id = call.message.message_id
    
    try:
        if call.data in userbot_settings_callback_data:
            return await userbot_settings_callback(call, chat_id, message_id)
        elif call.data in image_buttons_callback_data:
            return await image_callback(call, chat_id, message_id)
        elif call.data in video_buttons_callback_data:
            return await video_callback(call, chat_id, message_id)
        elif call.data in scroll_buttons_callback_data:
            return await scroll_buttons_callback(call, chat_id, message_id)
        elif call.data in admin_callback_data:
            return await admin_callback(call, chat_id, message_id)
        elif call.data in back_buttons_callback_data:
            return await back_buttons_callback(call, chat_id, message_id)
        else:
            if "del_img-" in call.data:
                material_id = call.data.split("del_img-")[1]
                bot_username = db.get_photo_info(material_id)
                photo_user_id = db.get_user_bot_created_by_id(bot_username)
                db.delete_photo(material_id)
                
                try:
                    await bot.send_message(
                        chat_id=photo_user_id, 
                        text=f"<b>‚ùå –§–æ—Ç–æ —É–¥–∞–ª–µ–Ω–æ. –ù–∞—Ä—É—à–∞–µ—Ç –ø—Ä–∞–≤–∏–ª–∞ –ø—Ä–æ–µ–∫—Ç–∞.</b>",
                        parse_mode=ParseMode.HTML
                    )
                except:
                    pass
                
                
                try:
                    await bot.delete_message(
                        chat_id=call.message.chat.id,
                        message_id=call.message.message_id
                    )
                except:
                    pass
                
                return
            
            if "del_vid-" in call.data:
                material_id = call.data.split("del_vid-")[1]
                bot_username = db.get_video_info(material_id)
                video_user_id = db.get_user_bot_created_by_id(bot_username)
                db.delete_video(material_id)
                
                try:
                    await bot.send_message(
                        chat_id=video_user_id, 
                        text=f"<b>‚ùå –í–∏–¥–µ–æ —É–¥–∞–ª–µ–Ω–æ. –ù–∞—Ä—É—à–∞–µ—Ç –ø—Ä–∞–≤–∏–ª–∞ –ø—Ä–æ–µ–∫—Ç–∞.</b>",
                        parse_mode=ParseMode.HTML
                    )
                except:
                    pass
                
                
                try:
                    await bot.delete_message(
                        chat_id=call.message.chat.id,
                        message_id=call.message.message_id
                    )
                except:
                    pass
                
                return
                
            if call.data == "one_month_price":
                data = db.get_storage(chat_id)
                data["popup_sum"] = cf.price_for_one_month
                data["premium_duration"] = 1
                db.update_storage(chat_id, data)
                
                
                return await bot.edit_message_caption(
                    chat_id=chat_id,
                    message_id=message_id,
                    caption="<b><u>üíé 1 –º–µ—Å—è—Ü</u>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:</b>",
                    parse_mode=ParseMode.HTML,
                    reply_markup=kb.payment_methods_kb()
                )
                
            if call.data == "three_month_price":
                data = db.get_storage(chat_id)
                data["popup_sum"] = cf.price_for_three_month
                data["premium_duration"] = 3
                db.update_storage(chat_id, data)
                
                
                return await bot.edit_message_caption(
                    chat_id=chat_id,
                    message_id=message_id,
                    caption="<b><u>üíé 3 –º–µ—Å—è—Ü–∞</u>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:</b>",
                    parse_mode=ParseMode.HTML,
                    reply_markup=kb.payment_methods_kb()
                )
                
            if call.data == "six_month_price":
                data = db.get_storage(chat_id)
                data["popup_sum"] = cf.price_for_six_month
                data["premium_duration"] = 6
                db.update_storage(chat_id, data)
                
                
                return await bot.edit_message_caption(
                    chat_id=chat_id,
                    message_id=message_id,
                    caption="<b><u>üíé 6 –º–µ—Å—è—Ü–µ–≤</u>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:</b>",
                    parse_mode=ParseMode.HTML,
                    reply_markup=kb.payment_methods_kb()
                )
                
            if call.data == "statistic":
                total_income = db.get_total_income(chat_id)
                monthly_income = db.get_monthly_income(chat_id)
                weekly_income = db.get_weekly_income(chat_id)
                daily_income = db.get_daily_income(chat_id)
                
                total_subscriptions = db.get_total_subscriptions(chat_id)
                monthly_subscriptions = db.get_monthly_subscriptions(chat_id)
                weekly_subscriptions = db.get_weekly_subscriptions(chat_id)
                daily_subscriptions = db.get_daily_subscriptions(chat_id)
                
                total_images = db.get_total_bots_images(chat_id)
                total_videos = db.get_total_bots_videos(chat_id)
                
                
                text = f"<b><u>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Å–µ–º –±–æ—Ç–∞–º</u></b>\n\n<b>–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ –≤—Å–µ–≥–æ:</b> <code>{total_income} ‚ÇΩ</code>\n<b>üíµ –ó–∞ –º–µ—Å—è—Ü:</b> <code>{monthly_income} ‚ÇΩ</code>\n<b>üíµ –ó–∞ –Ω–µ–¥–µ–ª—é:</b> <code>{weekly_income} ‚ÇΩ</code>\n<b>üíµ –ó–∞ —Å—É—Ç–∫–∏:</b> <code>{daily_income} ‚ÇΩ</code>\n\n<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤—Å–µ–≥–æ:</b> <code>{total_subscriptions}</code>\n<b>üë§ –ó–∞ –º–µ—Å—è—Ü:</b> <code>{monthly_subscriptions}</code>\n<b>üë§ –ó–∞ –Ω–µ–¥–µ–ª—é:</b> <code>{weekly_subscriptions}</code>\n<b>üë§ –ó–∞ —Å—É—Ç–∫–∏:</b> <code>{daily_subscriptions}</code>\n\n<b>üñº –§–æ—Ç–æ:</b> <code>{total_images}</code>\n<b>üñº –í–∏–¥–µ–æ:</b> <code>{total_videos}</code>"
                
                await bot.edit_message_text(
                    chat_id=chat_id,
                    message_id=message_id,
                    text=text,
                    parse_mode=ParseMode.HTML,
                    reply_markup=kb.back_to_profile_kb()
                )
                
                return
            
            if call.data == "withdrawal":
                if db.get_balance(chat_id) < 20:
                    await bot.answer_callback_query(
                        callback_query_id=call.id,
                        text="–ë–∞–ª–∞–Ω—Å –¥–ª—è –≤—ã–≤–æ–¥–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 20 ‚ÇΩ."
                    )
                else:
                    if db.get_subscription_time(chat_id) > 0:
                        proc = 3
                    else:
                        proc = db.get_commission_percentage()
                    await bot.edit_message_text(
                        chat_id=chat_id,
                        message_id=message_id,
                        text=f"<b>üè¶ –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—à–µ–ª—ë–∫ –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤:</b>\n\n<b>üíØ –ü—Ä–æ—Ü–µ–Ω—Ç –∫–æ–º–∏—Å—Å–∏–∏ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç</b> <code>{proc}%</code>",
                        parse_mode=ParseMode.HTML,
                        reply_markup=kb.withdrawal_kb()
                    )
                
                return
                
            if call.data == "QIWI_withdrawal":
                data = db.get_storage(chat_id)
                data["wallet_type"] = "ü•ù QIWI"
                db.update_storage(chat_id, data)
                db.update_state(chat_id, states.input_card_number)
                
                return await bot.edit_message_text(
                    chat_id=chat_id,
                    message_id=message_id,
                    text="<b>üìû –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞:</b>",
                    parse_mode=ParseMode.HTML
                )
                
            if call.data == "YOOMONEY_withdrawal":
                data = db.get_storage(chat_id)
                data["wallet_type"] = "üëõ YOOMONEY"
                db.update_storage(chat_id, data)
                db.update_state(chat_id, states.input_card_number)
                
                return await bot.edit_message_text(
                    chat_id=chat_id,
                    message_id=message_id,
                    text="<b>üìû –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞:</b>",
                    parse_mode=ParseMode.HTML
                )
            
            if call.data == "popup_qiwi":
                qiwi = Qiwi()
                bill_id = uuid.uuid4().hex
                data = db.get_storage(chat_id)
                popup_sum = data["popup_sum"]
                premium_duration = int(data["premium_duration"])
                
                await qiwi.make_bill(bill_id, popup_sum, f"@{(await bot.get_me()).username}")
                pay_url = await qiwi.get_pay_url(bill_id)
                
                asyncio.create_task(check_qiwi_popup(chat_id, bill_id, premium_duration))
                
                return await bot.edit_message_caption(
                    chat_id=chat_id,
                    message_id=message_id,
                    caption=f"<b>–û–ø–ª–∞—Ç–∏—Ç–µ —Å—á–µ—Ç –≤ —Ç–µ—á–µ–Ω–∏–∏ 30 –º–∏–Ω—É—Ç. –°—Ä–µ–¥—Å—Ç–≤–∞ –Ω–∞ –±–∞–ª–∞–Ω—Å –∑–∞—á–∏—Å–ª—è—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.</b>",
                    parse_mode=ParseMode.HTML,
                    reply_markup=kb.pay_kb(pay_url)
                )
            
            if call.data == "popup_yoomoney":
                yoomoney = YooMoney()
                bill_id = generate_random_label()
                data = db.get_storage(chat_id)
                popup_sum = data["popup_sum"]
                premium_duration = int(data["premium_duration"])

                pay_url = yoomoney.make_bill(bill_id, popup_sum, f"@{(await bot.get_me()).username}")
                
                asyncio.create_task(check_yoomoney_popup(chat_id, bill_id, float(popup_sum), premium_duration))
                
                return await bot.edit_message_caption(
                    chat_id=chat_id,
                    message_id=message_id,
                    caption=f"<b>–û–ø–ª–∞—Ç–∏—Ç–µ —Å—á–µ—Ç –≤ —Ç–µ—á–µ–Ω–∏–∏ 30 –º–∏–Ω—É—Ç. –°—Ä–µ–¥—Å—Ç–≤–∞ –Ω–∞ –±–∞–ª–∞–Ω—Å –∑–∞—á–∏—Å–ª—è—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.</b>",
                    parse_mode=ParseMode.HTML,
                    reply_markup=kb.pay_kb(pay_url)
                )
                
            if call.data == "popup_from_balance":
                balance = db.get_balance(chat_id)
                data = db.get_storage(chat_id)
                popup_sum = float(data["popup_sum"])
                premium_duration = int(data["premium_duration"])
                
                if balance < popup_sum:
                    return await bot.answer_callback_query(
                        callback_query_id=call.id,
                        text="–ù–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!"
                    )
                
                new_balance = balance - popup_sum
                db.update_balance(chat_id, new_balance)
                db.update_subscription_time(chat_id, premium_duration)
                
                return await bot.edit_message_caption(
                    chat_id=chat_id,
                    message_id=message_id,
                    caption=f"<b>üíé–ü—Ä–µ–º–∏–º—É–º –ø–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω–∞.</b>",
                    parse_mode=ParseMode.HTML
                )
                
            if "confrim_withdrawal-" in call.data:
                id = call.data.split("confrim_withdrawal-")[1]
                if db.get_withdrawal_request_status(id) == "incomplete":
                    db.update_withdrawal_request_status(id)
                    
                    await bot.edit_message_reply_markup(
                        chat_id=call.message.chat.id,
                        message_id=message_id,
                        reply_markup=kb.confrimed_withdrawal_kb()
                    )
                    
                    await bot.send_message(
                        chat_id=db.get_withdrawal_request(id)[1],
                        text="<b>‚úÖ –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –ø—Ä–æ—à—ë–ª —É—Å–ø–µ—à–Ω–æ.</b>",
                        parse_mode=ParseMode.HTML
                    )
                else:
                    await bot.edit_message_reply_markup(
                        chat_id=call.message.chat.id,
                        message_id=message_id,
                        reply_markup=kb.confrimed_withdrawal_kb()
                    )
                
                return
            
            if "c_w_adm-" in call.data:
                id = call.data.split("c_w_adm-")[1]
                withdrawal_request = db.get_withdrawal_request(id)
                
                if db.get_withdrawal_request_status(id) == "incomplete":
                    db.update_withdrawal_request_status(id)

                    await bot.edit_message_text(
                        chat_id=chat_id,
                        message_id=message_id,
                        text = f"<b><u>–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ ‚Ññ{withdrawal_request[0]}</u></b>\n\n<b>–°—Ç–∞—Ç—É—Å:</b> üü¢\n\n<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> @{db.get_username(withdrawal_request[1])}\n<b>–°—É–º–º–∞:</b> <code>{round(withdrawal_request[2], 2)} ‚ÇΩ</code>\n<b>–¢–∏–ø –∫–æ—à–µ–ª—å–∫–∞:</b> <code>{withdrawal_request[5]}</code>\n<b>–ù–æ–º–µ—Ä –∫–æ—à–µ–ª—å–∫–∞:</b> <code>{withdrawal_request[6]}</code>\n\n<b>–î–∞—Ç–∞:</b> <code>{parse(withdrawal_request[3]).strftime('%d.%m.%Y %H:%M:%S')}</code>" ,
                        reply_markup=kb.back_to_withdrawal_requests_list_kb(id),
                        parse_mode=ParseMode.HTML
                    )
                    
                    await bot.send_message(
                        chat_id=withdrawal_request[1],
                        text="<b>‚úÖ –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –ø—Ä–æ—à—ë–ª —É—Å–ø–µ—à–Ω–æ.</b>",
                        parse_mode=ParseMode.HTML
                    )
                    
                else:
                    await bot.edit_message_text(
                        chat_id=chat_id,
                        message_id=message_id,
                        text = f"<b><u>–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ ‚Ññ{withdrawal_request[0]}</u></b>\n\n<b>–°—Ç–∞—Ç—É—Å:</b> üü¢\n\n<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> @{db.get_username(withdrawal_request[1])}\n<b>–°—É–º–º–∞:</b> <code>{round(withdrawal_request[2], 2)} ‚ÇΩ</code>\n<b>–¢–∏–ø –∫–æ—à–µ–ª—å–∫–∞:</b> <code>{withdrawal_request[5]}</code>\n<b>–ù–æ–º–µ—Ä –∫–æ—à–µ–ª—å–∫–∞:</b> <code>{withdrawal_request[6]}</code>\n\n<b>–î–∞—Ç–∞:</b> <code>{parse(withdrawal_request[3]).strftime('%d.%m.%Y %H:%M:%S')}</code>" ,
                        reply_markup=kb.back_to_withdrawal_requests_list_kb(id),
                        parse_mode=ParseMode.HTML
                    )
                
                return
                    
            if call.data == "add_new_bot":
                db.update_state(chat_id, states.new_bot_state)

                return await bot.edit_message_caption(
                    chat_id=chat_id,
                    message_id=message_id,
                    caption="<b>–ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –≤ @BotFather\n\n‚§µÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞:</b>",
                    parse_mode=ParseMode.HTML,
                    reply_markup=kb.back_to_user_bots_list_kb()
                )
                
                
            for user_bot in db.get_all_users_bots():
                if user_bot[0] in call.data:
                    db.update_current_bot(chat_id, user_bot[0])
                    created_date = db.get_user_bot_created_time(user_bot[0])
                    images = len(db.get_user_bot_photos(user_bot[0]))
                    photo_price = db.get_user_bot_photo_price(user_bot[0])
                    videos = len(db.get_user_bot_videos(user_bot[0]))
                    video_price = db.get_user_bot_video_price(user_bot[0])
                    created_by_username = db.get_user_bot_created_by_username(user_bot[0])
                    
                    caption = f"<b><u>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ</u></b>\n\n<b>ü§ñ Username –±–æ—Ç–∞:</b> @{user_bot[0]}\n\n<b>üëî –ê–¥–º–∏–Ω:</b> @{created_by_username}\n\n<b>‚åöÔ∏è –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞:</b> <code>{created_date}</code>\n\n<b>üñº –§–æ—Ç–æ:</b> <code>{images}</code>\n<b>üí≤ –°—Ç–æ–∏–º–æ—Å—Ç—å —Ñ–æ—Ç–æ:</b> <code>{photo_price} ‚ÇΩ</code>\n\n<b>üñº –í–∏–¥–µ–æ:</b> <code>{videos}</code>\n<b>üí≤ –°—Ç–æ–∏–º–æ—Å—Ç—å –≤–∏–¥–µ–æ:</b> <code>{video_price} ‚ÇΩ</code>"
                    
                    if "admin|" in call.data:
                        await bot.edit_message_text(
                            chat_id=chat_id,
                            message_id=message_id,
                            text=caption,
                            parse_mode=ParseMode.HTML,
                            reply_markup=kb.back_to_all_bots_list_kb()
                        )
                    else:
                        await bot.edit_message_caption(
                            chat_id=chat_id,
                            message_id=message_id,
                            caption=caption,
                            parse_mode=ParseMode.HTML,
                            reply_markup=kb.bot_info_kb()
                        )
                    return
                        
            for withdrawal_request in db.get_withdrawal_requests():
                if str(withdrawal_request[0]) == str(call.data):
                    if withdrawal_request[4] == "incomplete":
                        status = "‚ö™Ô∏è"
                    else:
                        status = "üü¢"
                        
                    text = f"<b><u>–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ ‚Ññ{withdrawal_request[0]}</u></b>\n\n<b>–°—Ç–∞—Ç—É—Å:</b> {status}\n\n<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> @{db.get_username(withdrawal_request[1])}\n<b>–°—É–º–º–∞:</b> <code>{round(withdrawal_request[2], 2)} ‚ÇΩ</code>\n<b>–¢–∏–ø –∫–æ—à–µ–ª—å–∫–∞:</b> <code>{withdrawal_request[5]}</code>\n<b>–ù–æ–º–µ—Ä –∫–æ—à–µ–ª—å–∫–∞:</b> <code>{withdrawal_request[6]}</code>\n\n<b>–î–∞—Ç–∞:</b> <code>{parse(withdrawal_request[3]).strftime('%d.%m.%Y %H:%M:%S')}</code>" 
                    
                    
                    await bot.edit_message_text(
                        chat_id=chat_id,
                        message_id=message_id,
                        text=text,
                        parse_mode=ParseMode.HTML,
                        reply_markup=kb.back_to_withdrawal_requests_list_kb(withdrawal_request[0])
                    )
                    return
                
    except:
        await bot.answer_callback_query(
            callback_query_id=call.id,
            text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞!",
            show_alert=True
        )
        
        
async def check_qiwi_popup(chat_id, bill_id, premium_duration):
    qiwi = Qiwi()
    kb = Keyboards()
    
    while True:
        payment_status = await qiwi.check_payment(bill_id)
        
        if payment_status.lower() == "paid":
            db = DB()
            payment_amount = float(await qiwi.get_payment_amount(bill_id))
            db.add_new_replenishment(chat_id, payment_amount)
            
            for admin_id in cf.admins_chat_id:
                try:
                    await bot.send_message(
                        chat_id=admin_id, 
                        text=f"<b>üíé –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{db.get_username(chat_id)} –ø—Ä–∏–æ–±—Ä–µ–ª –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ {premium_duration} –º.</b>",
                        parse_mode=ParseMode.HTML
                    )
                except:
                    continue

            db.update_subscription_time(chat_id, premium_duration)
                
            return await bot.send_message(
                chat_id=chat_id,
                text=f"<b>üíé –ü—Ä–µ–º–∏–º—É–º –ø–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω–∞.</b>",
                parse_mode=ParseMode.HTML
            )
        elif payment_status.lower() == "expired":
            
            return await bot.send_message(
                chat_id=chat_id,
                text=f"<b>‚õîÔ∏è –í—Ä–µ–º—è –ø–ª–∞—Ç–µ–∂–∞ –∏—Å—Ç–µ–∫–ª–æ. –ü–ª–∞—Ç–µ–∂ –æ—Ç–º–µ–Ω–µ–Ω.</b>",
                reply_markup=kb.menu_button_kb()
            )
        else:
            await asyncio.sleep(10)


async def check_yoomoney_popup(chat_id, bill_id, payment_amount, premium_duration):
    start_time = datetime.now()
    yoomoney =  YooMoney()
    kb = Keyboards()
    
    while True:
        payment_status = yoomoney.operation_info(bill_id)
        if payment_status == "success":
            db = DB()
            db.add_new_replenishment(chat_id, payment_amount)
            
            for admin_id in cf.admins_chat_id:
                try:
                    await bot.send_message(
                        chat_id=admin_id, 
                        text=f"<b>üíé –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{db.get_username(chat_id)} –ø—Ä–∏–æ–±—Ä–µ–ª –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ {premium_duration} –º.</b>",
                        parse_mode=ParseMode.HTML
                    )
                except:
                    continue

            db.update_subscription_time(chat_id, premium_duration)
                
            return await bot.send_message(
                chat_id=chat_id,
                text=f"<b>üíé –ü—Ä–µ–º–∏–º—É–º –ø–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω–∞.</b>",
                parse_mode=ParseMode.HTML
            )
        else:
            if datetime.now() >= start_time + timedelta(minutes=30):
                return await bot.send_message(
                    chat_id=chat_id,
                    text=f"<b>‚õîÔ∏è –í—Ä–µ–º—è –ø–ª–∞—Ç–µ–∂–∞ –∏—Å—Ç–µ–∫–ª–æ. –ü–ª–∞—Ç–µ–∂ –æ—Ç–º–µ–Ω–µ–Ω.</b>",
                    reply_markup=kb.menu_button_kb()
                )
            else:
                await asyncio.sleep(10)


def generate_random_label():
    while True:
        db = DB()
        label = uuid.uuid4().hex
        
        if label not in db.get_all_labels():
            db.add_label(label)
            return label
    
def register_handlers_client(dp: Dispatcher):
    dp.register_callback_query_handler(callback_handler)
